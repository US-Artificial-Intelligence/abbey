services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        - MY_BUILD_ENV=${MY_BUILD_ENV:-prod}
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    environment:
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED:-false}

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        - MY_BUILD_ENV=${MY_BUILD_ENV:-prod}  # BUILD_ENV as a name seems to cause problems
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/frontend-build
      - frontend-node-modules:/frontend-build/node_modules
      - frontend-next:/frontend-build/.next

  mysql:
    image: mysql:8
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=learn
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d

  celery:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        - MY_BUILD_ENV=${MY_BUILD_ENV:-prod}
    command: >
      sh -c "if [ "$MY_BUILD_ENV" = "prod" ]; then
             celery -A app.worker.celery worker;
           else
             celery -A app.worker.celery worker --loglevel=INFO;
           fi"
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - redis

  redis:
      image: redis:latest
      ports:
        - "6379:6379"

  db_pooler:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: python3 -m app.db_pooler
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - mysql

  emailer:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: python3 -m app.email_process
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - mysql
    profiles:
      - email

volumes:
  mysql-data:
  frontend-node-modules:
  frontend-next:
